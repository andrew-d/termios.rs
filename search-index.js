var searchIndex = {};
searchIndex['termios'] = {"items":[[0,"","termios",""],[1,"Termios","",""],[11,"input_flags","","",0],[11,"output_flags","","",0],[11,"control_flags","","",0],[11,"local_flags","","",0],[11,"control_chars","","",0],[11,"input_speed","","",0],[11,"output_speed","","",0],[1,"ControlCharacters","",""],[11,"VINTR","","",1],[11,"VQUIT","","",1],[11,"VERASE","","",1],[11,"VKILL","","",1],[11,"VEOF","","",1],[11,"VTIME","","",1],[11,"VMIN","","",1],[11,"VSWTC","","",1],[11,"VSTART","","",1],[11,"VSTOP","","",1],[11,"VSUSP","","",1],[11,"VEOL","","",1],[11,"VREPRINT","","",1],[11,"VDISCARD","","",1],[11,"VWERASE","","",1],[11,"VLNEXT","","",1],[11,"VEOL2","","",1],[1,"InputFlags","",""],[1,"OutputFlags","",""],[1,"ControlFlags","",""],[1,"LocalFlags","",""],[2,"Speed","",""],[12,"B0","","",2],[12,"B50","","",2],[12,"B75","","",2],[12,"B110","","",2],[12,"B134","","",2],[12,"B150","","",2],[12,"B200","","",2],[12,"B300","","",2],[12,"B600","","",2],[12,"B1200","","",2],[12,"B1800","","",2],[12,"B2400","","",2],[12,"B4800","","",2],[12,"B9600","","",2],[12,"B19200","","",2],[12,"B38400","","",2],[12,"B57600","","",2],[12,"B115200","","",2],[12,"B230400","","",2],[12,"B460800","","",2],[12,"B500000","","",2],[12,"B576000","","",2],[12,"B921600","","",2],[12,"B1000000","","",2],[12,"B1152000","","",2],[12,"B1500000","","",2],[12,"B2000000","","",2],[12,"B2500000","","",2],[12,"B3000000","","",2],[12,"B3500000","","",2],[12,"B4000000","","",2],[5,"IGNBRK","",""],[5,"BRKINT","",""],[5,"IGNPAR","",""],[5,"PARMRK","",""],[5,"INPCK","",""],[5,"ISTRIP","",""],[5,"INLCR","",""],[5,"IGNCR","",""],[5,"ICRNL","",""],[5,"IUCLC","",""],[5,"IXON","",""],[5,"IXANY","",""],[5,"IXOFF","",""],[5,"IMAXBEL","",""],[5,"IUTF8","",""],[5,"OPOST","",""],[5,"OLCUC","",""],[5,"ONLCR","",""],[5,"OCRNL","",""],[5,"ONOCR","",""],[5,"ONLRET","",""],[5,"OFILL","",""],[5,"OFDEL","",""],[5,"NL0","",""],[5,"NL1","",""],[5,"CR0","",""],[5,"CR1","",""],[5,"CR2","",""],[5,"CR3","",""],[5,"TAB0","",""],[5,"TAB1","",""],[5,"TAB2","",""],[5,"TAB3","",""],[5,"BS0","",""],[5,"BS1","",""],[5,"FF0","",""],[5,"FF1","",""],[5,"VT0","",""],[5,"VT1","",""],[5,"CS5","",""],[5,"CS6","",""],[5,"CS7","",""],[5,"CS8","",""],[5,"CSTOPB","",""],[5,"CREAD","",""],[5,"PARENB","",""],[5,"PARODD","",""],[5,"HUPCL","",""],[5,"CLOCAL","",""],[5,"CBAUD","",""],[5,"CBAUDEX","",""],[5,"CIBAUD","",""],[5,"CMSPAR","",""],[5,"CRTSCTS","",""],[5,"ISIG","",""],[5,"ICANON","",""],[5,"XCASE","",""],[5,"ECHO","",""],[5,"ECHOE","",""],[5,"ECHOK","",""],[5,"ECHONL","",""],[5,"NOFLSH","",""],[5,"TOSTOP","",""],[5,"ECHOCTL","",""],[5,"ECHOPRT","",""],[5,"ECHOKE","",""],[5,"FLUSHO","",""],[5,"PENDIN","",""],[5,"IEXTEN","",""],[10,"fmt","","",1],[10,"hash","","",3],[10,"cmp","","",3],[10,"partial_cmp","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"empty","","Returns an empty set of flags.",3],[10,"all","","Returns the set containing all flags.",3],[10,"bits","","Returns the raw value of the flags currently stored.",3],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3],[10,"is_empty","","Returns `true` if no flags are currently stored.",3],[10,"is_all","","Returns `true` if all flags are currently set.",3],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3],[10,"insert","","Inserts the specified flags in-place.",3],[10,"remove","","Removes the specified flags in-place.",3],[10,"bitor","","Returns the union of the two sets of flags.",3],[10,"bitand","","Returns the intersection between the two sets of flags.",3],[10,"sub","","Returns the set difference of the two sets of flags.",3],[10,"not","","Returns the complement of this set of flags.",3],[10,"hash","","",4],[10,"cmp","","",4],[10,"partial_cmp","","",4],[10,"lt","","",4],[10,"le","","",4],[10,"gt","","",4],[10,"ge","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"empty","","Returns an empty set of flags.",4],[10,"all","","Returns the set containing all flags.",4],[10,"bits","","Returns the raw value of the flags currently stored.",4],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4],[10,"is_empty","","Returns `true` if no flags are currently stored.",4],[10,"is_all","","Returns `true` if all flags are currently set.",4],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4],[10,"insert","","Inserts the specified flags in-place.",4],[10,"remove","","Removes the specified flags in-place.",4],[10,"bitor","","Returns the union of the two sets of flags.",4],[10,"bitand","","Returns the intersection between the two sets of flags.",4],[10,"sub","","Returns the set difference of the two sets of flags.",4],[10,"not","","Returns the complement of this set of flags.",4],[10,"hash","","",5],[10,"cmp","","",5],[10,"partial_cmp","","",5],[10,"lt","","",5],[10,"le","","",5],[10,"gt","","",5],[10,"ge","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"empty","","Returns an empty set of flags.",5],[10,"all","","Returns the set containing all flags.",5],[10,"bits","","Returns the raw value of the flags currently stored.",5],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5],[10,"is_empty","","Returns `true` if no flags are currently stored.",5],[10,"is_all","","Returns `true` if all flags are currently set.",5],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5],[10,"insert","","Inserts the specified flags in-place.",5],[10,"remove","","Removes the specified flags in-place.",5],[10,"bitor","","Returns the union of the two sets of flags.",5],[10,"bitand","","Returns the intersection between the two sets of flags.",5],[10,"sub","","Returns the set difference of the two sets of flags.",5],[10,"not","","Returns the complement of this set of flags.",5],[10,"hash","","",6],[10,"cmp","","",6],[10,"partial_cmp","","",6],[10,"lt","","",6],[10,"le","","",6],[10,"gt","","",6],[10,"ge","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"empty","","Returns an empty set of flags.",6],[10,"all","","Returns the set containing all flags.",6],[10,"bits","","Returns the raw value of the flags currently stored.",6],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6],[10,"is_empty","","Returns `true` if no flags are currently stored.",6],[10,"is_all","","Returns `true` if all flags are currently set.",6],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6],[10,"insert","","Inserts the specified flags in-place.",6],[10,"remove","","Removes the specified flags in-place.",6],[10,"bitor","","Returns the union of the two sets of flags.",6],[10,"bitand","","Returns the intersection between the two sets of flags.",6],[10,"sub","","Returns the set difference of the two sets of flags.",6],[10,"not","","Returns the complement of this set of flags.",6],[10,"fmt","","",2]],"paths":[[1,"Termios"],[1,"ControlCharacters"],[2,"Speed"],[1,"InputFlags"],[1,"OutputFlags"],[1,"ControlFlags"],[1,"LocalFlags"]]};
initSearch(searchIndex);
